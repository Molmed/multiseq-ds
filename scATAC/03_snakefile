samples = ["REH", "GM12078"]
samples_combined = '_'.join(samples)
out_dir = "03_out"

rule all:
    input:
         out_dir + "/" + samples_combined + "_merge_seurat.rds", 
         out_dir + "/" + samples_combined + "_summary.csv"    

rule cellranger_atac_count:
    input: 
        ref_genome="/crex/data/Chromium/cellranger-ATAC-data/1.2.0/rackham/refdata-cellranger-atac-GRCh38-1.2.0",
        fastq="/crex/proj/uppstore2017165/nobackup/scATAC/fastq" 
    output:
        directory(out_dir + "/{sample}_atac_count")
    params: 
        sample="{sample}",
        id="{sample}_atac_count"
    shell: 
        """
        module load bioinfo-tools
        module load cellranger-ATAC/1.2.0

        cellranger-atac count --id={params.id} --reference={input.ref_genome} --fastqs={input.fastq} --sample={params.sample}
        
        mv {params.id} out 
        """
rule preprocess_seurat: 
    input: 
        out_dir + "/{sample}_atac_count"
    output: 
        out_dir + "/{sample}_seurat_preproc.rds"
    shell:
        """
        module load bioinfo-tools
        module load R/4.0.0 
        module load R_packages/4.0.0        

        Rscript --vanilla scripts/atac_preproc_seurat.R {input} {output}
        """

rule merge_seurat:
    input:
        expand(out_dir + "/{sample}_seurat_preproc.rds", sample = samples)
    output:
        out_dir + "/" + samples_combined + "_merge_seurat.rds"
    shell:
        """
        module load bioinfo-tools
        module load R/4.0.0
        module load R_packages/4.0.0

        Rscript --vanilla scripts/atac_merge_seurat.R {output} {input}
        """
rule summary:
    input:
        expand(out_dir + "/{sample}_atac_count", sample = samples) 
    output:
        out_dir + "/" + samples_combined + "_summary.csv" 
    run:
        import pandas as pd
        import csv 
        
        combined = pd.concat([pd.read_csv(f  + "/outs/summary.csv") for f in input])
        combined = combined[["total_usable_fragments", "num_fragments", "frac_waste_total", "annotated_cells", "median_fragments_per_cell", "r1_q30_bases_fract", "r2_q30_bases_fract", "si_q30_bases_fract", "bc_q30_bases_fract", "frac_fragments_overlapping_peaks"]]
                          
        combined.to_csv(output[0], index=False)
       

